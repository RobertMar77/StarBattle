openapi: 3.0.3
info:
  title:  Star Battle Rest API
  description: |-
    This is a API documentation of out Star Battle Game and if you use these endpoints while the server is running you will be able to see all the puzzle data. Our user side of the database is not set up with seed data so the endpoints won't retrieve user data, but everythin else works.

  version: 1.0.11
servers:
  - url: http://localhost:3390
tags:
  - name: puzzles
    description: Everything about your Puzzles
  - name: users
    description: Operations about user and user data
paths:
  /puzzles:
    get:
      tags:
        - puzzles
      summary: Finds all puzzles
      description: All puzzles saved in the database are returned.
      operationId: getAll
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Puzzles'

    post:
      tags:
        - puzzles
      summary: Add a new puzzle to puzzles
      description: Add a new puzzle to puzzles
      operationId: addPuzzle
      requestBody:
        description: Create a new puzzle in puzzles
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Puzzle'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Puzzle'
        '405':
          description: Invalid input (Puzzle incorrectly set up)

  /puzzles/{id}:
    get:
      tags:
        - puzzles
      summary: Find puzzle by ID
      description: For valid response try integer IDs with value > 0 and <= 24. Other values will generate exceptions.
      operationId: getById
      parameters:
        - name: id
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Puzzle'
        '400':
          description: Invalid ID supplied

  /puzzles/{id}/layout:
    get:
      tags:
        - puzzles
      summary: Find puzzle layouts by ID
      description: For valid response try integer IDs with value >= 1 and <= 24. Other values will generate exceptions.
      operationId: getLayout
      parameters:
        - name: id
          in: path
          description: ID of puzzle that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Layout'
        '400':
          description: Invalid ID supplied

  /puzzles/{id}/answer:
    get:
      tags:
        - puzzles
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value >= 1 and <= 24. Other values will generate exceptions.
      operationId: getAnswer
      parameters:
        - name: id
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Answer'
        '400':
          description: Invalid ID supplied









  /users:
    get:
      tags:
        - users
      summary: Finds all users
      description: Provides a list of all users.
      operationId: getA1l
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'

    post:
      tags:
        - users
      summary: Create user
      description: This can only be done when a user starts playing on a new device.
      operationId: createUser
      requestBody:
        description: Created a new user object with a unique new id.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'

      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'


  /users/{userId}:
    get:
      tags:
        - users
      summary: User by userId
      description: For valid response must be a current User ID. Other values will generate exceptions. The current user will have their id saved in a file for future use and for calling their user data from the server.
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID supplied





components:
  schemas:
    Answer:
      type: array
      items:
        type: array
        items:
          type: integer
      example:
        - [0,0,0,1,0,1,0,0,0,0]
        - [0,1,0,0,0,0,0,1,0,0]
        - [0,0,0,1,0,1,0,0,0,0]
        - [1,0,0,0,0,0,0,0,1,0]
        - [0,0,1,0,1,0,0,0,0,0]
        - [0,0,0,0,0,0,1,0,0,1]
        - [1,0,1,0,0,0,0,0,0,0]
        - [0,0,0,0,0,0,0,1,0,1]
        - [0,1,0,0,1,0,0,0,0,0]
        - [0,0,0,0,0,0,1,0,1,0]
    Layout:
      type: array
      items:
        type: array
        items:
          type: integer
      example:
        - [1,1,2,2,2,3,3,3,3,3]
        - [1,1,2,3,3,3,4,4,3,3]
        - [1,1,2,2,3,3,4,4,4,3]
        - [1,1,2,2,3,3,4,4,4,10]
        - [5,5,6,6,6,3,4,10,10,10]
        - [5,5,7,7,7,7,8,10,10,10]
        - [5,5,7,5,5,7,8,8,10,10]
        - [5,5,5,5,5,7,8,8,10,10]
        - [5,5,5,5,7,7,7,8,9,10]
        - [5,5,5,7,7,7,9,9,9,10]

    Puzzle:
      type: object
      properties:
        id:
          type: string
          example: 1
        level:
          type: integer
          format: int64
          example: 1
        gridSize:
          type: integer
          format: int64
          example: 10
        numStars:
          type: integer
          format: int64
          example: 2
        layout:
          $ref: '#/components/schemas/Layout'
        answer:
          $ref: '#/components/schemas/Answer'

    Puzzles:
      type: array
      items:
        $ref: '#/components/schemas/Puzzle'
      example:
        - {id: 1,
           level: 1,
           gridSize: 10,
           numStars: 2,
           layout: [[1,1,2,2,2,3,3,3,3,3],
                    [1,1,2,3,3,3,4,4,3,3],
                    [1,1,2,2,3,3,4,4,4,3],
                    [1,1,2,2,3,3,4,4,4,10],
                    [5,5,6,6,6,3,4,10,10,10],
                    [5,5,7,7,7,7,8,10,10,10],
                    [5,5,7,5,5,7,8,8,10,10],
                    [5,5,5,5,5,7,8,8,10,10],
                    [5,5,5,5,7,7,7,8,9,10],
                    [5,5,5,7,7,7,9,9,9,10]],

           answer:  [[0,0,0,1,0,1,0,0,0,0],
                     [0,1,0,0,0,0,0,1,0,0],
                     [0,0,0,1,0,1,0,0,0,0],
                     [1,0,0,0,0,0,0,0,1,0],
                     [0,0,1,0,1,0,0,0,0,0],
                     [0,0,0,0,0,0,1,0,0,1],
                     [1,0,1,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,1,0,1],
                     [0,1,0,0,1,0,0,0,0,0],
                     [0,0,0,0,0,0,1,0,1,0]]}
        - {id: 2,
           level: 2,
           gridSize: 10,
           numStars: 2,
           layout: [  [5,5,5,5,5,5,1,1,1,1],
                      [5,4,4,5,1,1,1,2,2,2],
                      [5,4,4,5,5,1,1,2,2,2],
                      [5,3,4,4,1,1,1,2,2,2],
                      [5,3,4,6,6,6,6,9,2,2],
                      [5,3,4,6,6,6,6,9,9,9],
                      [5,5,6,6,6,8,8,8,8,9],
                      [5,5,6,10,6,8,8,8,8,9],
                      [7,7,7,10,6,8,8,8,8,9],
                      [7,7,7,10,10,8,8,8,8,9]],

           answer:  [ [0,1,0,0,0,0,0,0,1,0],
                      [0,0,0,1,0,0,1,0,0,0],
                      [0,1,0,0,0,0,0,0,1,0],
                      [0,0,0,1,0,1,0,0,0,0],
                      [0,0,0,0,0,0,0,1,0,1],
                      [0,0,1,0,0,1,0,0,0,0],
                      [0,0,0,0,0,0,0,1,0,1],
                      [1,0,0,0,1,0,0,0,0,0],
                      [0,0,1,0,0,0,1,0,0,0],
                      [1,0,0,0,1,0,0,0,0,0]]}



    User:
      properties:
        id:
          type: integer
          format: int64

      example:
        {id: 18380102}

    Users:
      type: array
      items:
        type: integer

      example:
        - {id: 18380102}
        - {id: 13804305}
