openapi: 3.0.3
info:
  title:  Star Battle Rest API
  description: |-
    This is a API documentation of out Star Battle Game and if you use these endpoints while the server is running you will be able to see all the puzzle data. It returns client friendly arrays and integers/Strings for the responses.

  version: 1.0.11
servers:
  - url: http://localhost:3390
tags:
  - name: puzzles
    description: Everything about your Puzzles
  - name: users
    description: Operations about user and user data
paths:
  /puzzles:
    get:
      tags:
        - puzzles
      summary: Finds all puzzles
      description: All puzzles saved in the database are returned.
      operationId: getAll
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Puzzles'

    post:
      tags:
        - puzzles
      summary: Add a new puzzle to puzzles
      description: Add a new puzzle to puzzles
      operationId: addPuzzle
      requestBody:
        description: Create a new puzzle in puzzles
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Puzzle'
        required: true
      responses:
        '201':
          description: Create a New Puzzle
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Puzzle'
        '405':
          description: Invalid input (Puzzle incorrectly set up)

  /puzzles/{id}:
    get:
      tags:
        - puzzles
      summary: Find puzzle by ID
      description: For valid response try integer IDs with value > 0 and <= 24. Other values will generate exceptions.
      operationId: getById
      parameters:
        - name: id
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Puzzle'
        '404':
          description: ID Not Found in Server

  /puzzles/{id}/layout:
    get:
      tags:
        - puzzles
      summary: Find puzzle layouts by ID
      description: For valid response try integer IDs with value >= 1 and <= 24. Other values will generate exceptions.
      operationId: getLayout
      parameters:
        - name: id
          in: path
          description: ID of puzzle that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Layout'
        '404':
          description: ID Not Found in Server

  /puzzles/{id}/answer:
    get:
      tags:
        - puzzles
      summary: Find puzzle answers by ID
      description: For valid response try integer IDs with value >= 1 and <= 24. Other values will generate exceptions.
      operationId: getAnswer
      parameters:
        - name: id
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Answer'
        '404':
          description: ID Not Found in Server









  /users:
    get:
      tags:
        - users
      summary: Finds all users
      description: Provides a list of all users.
      operationId: getA1l
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'

    post:
      tags:
        - users
      summary: Create user
      description: This can only be done when a user starts playing on a new device.
      operationId: createUser
      requestBody:
        description: Created a new user object with a unique new id.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'

      responses:
        '201':
          description: Create New User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'


  /users/{userId}:
    get:
      tags:
        - users
      summary: Find User by userId
      description: For valid response must be a current User ID. Other values will generate exceptions. The current user will have their id saved in a file for future use and for calling their user data from the server. This endpoint is only used by the client to see if it exists. It returns the user object.
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: ID of User that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: userId Not Found in Server



  /users/{userId}/level:
    get:
      tags:
        - users
      summary: Get User Level by userId
      description: Finds the levels solved by the user with the selected userId.
      operationId: getLevelById
      parameters:
        - name: userId
          in: path
          description: ID of User whose level needs to be fetched
          required: true
          schema:
            type: integer
            format: int64

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Level'
            application/xml:
              schema:
                $ref: '#/components/schemas/Level'
        '404':
          description: userId Not Found in Server
    patch:
      tags:
        - users
      summary: Set User Level by userId
      description: Sets the levels solved by the user with the selected userId.
      operationId: setLevelById
      parameters:
        - name: userId
          in: path
          description: ID of User whose level needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Use a json that holds a desired level.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Level'
      responses:
        '204':
          description: successful operation with No Content

        '404':
          description: userId Not Found in Server


  /users/{userId}/solved:
    get:
      tags:
        - users
      summary: Finds Puzzles solved by User with the selected userId
      description: Finds the Puzzles solved by the user with the selected userId.
      operationId: getSolvedById
      parameters:
        - name: userId
          in: path
          description: ID of User whose Puzzles solved needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Solved'
            application/xml:
              schema:
                $ref: '#/components/schemas/Solved'
        '404':
          description: userId Not Found in Server


    patch:
      tags:
        - users
      summary: Add one to Puzzles solved by users by userId
      description: Adds one to Puzzles solved by the selected User.
      operationId: addSolvedById
      parameters:
        - name: userId
          in: path
          description: ID of User whose Puzzles solved needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: successful operation with No Content
        '404':
          description: userId Not Found in Server


  /users/{userId}/title:
    get:
      tags:
        - users
      summary: Find a user's Title by userId
      description: Find a user's Title by userId.
      operationId: getTitleById
      parameters:
        - name: userId
          in: path
          description: ID of User whose title needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Title'
            application/xml:
              schema:
                $ref: '#/components/schemas/Title'
        '404':
          description: userId Not Found in Server




components:
  schemas:
    Answer:
      type: array
      items:
        type: array
        items:
          type: integer
      example:
        - [0,0,0,1,0,1,0,0,0,0]
        - [0,1,0,0,0,0,0,1,0,0]
        - [0,0,0,1,0,1,0,0,0,0]
        - [1,0,0,0,0,0,0,0,1,0]
        - [0,0,1,0,1,0,0,0,0,0]
        - [0,0,0,0,0,0,1,0,0,1]
        - [1,0,1,0,0,0,0,0,0,0]
        - [0,0,0,0,0,0,0,1,0,1]
        - [0,1,0,0,1,0,0,0,0,0]
        - [0,0,0,0,0,0,1,0,1,0]
    Layout:
      type: array
      items:
        type: array
        items:
          type: integer
      example:
        - [1,1,2,2,2,3,3,3,3,3]
        - [1,1,2,3,3,3,4,4,3,3]
        - [1,1,2,2,3,3,4,4,4,3]
        - [1,1,2,2,3,3,4,4,4,10]
        - [5,5,6,6,6,3,4,10,10,10]
        - [5,5,7,7,7,7,8,10,10,10]
        - [5,5,7,5,5,7,8,8,10,10]
        - [5,5,5,5,5,7,8,8,10,10]
        - [5,5,5,5,7,7,7,8,9,10]
        - [5,5,5,7,7,7,9,9,9,10]

    Puzzle:
      type: object
      properties:
        id:
          type: string
          example: 1
        level:
          type: integer
          format: int64
          example: 1
        gridSize:
          type: integer
          format: int64
          example: 10
        numStars:
          type: integer
          format: int64
          example: 2
        layout:
          $ref: '#/components/schemas/Layout'
        answer:
          $ref: '#/components/schemas/Answer'

    Puzzles:
      type: array
      items:
        $ref: '#/components/schemas/Puzzle'
      example:
        - {id: 1,
           level: 1,
           gridSize: 10,
           numStars: 2,
           layout: [[1,1,2,2,2,3,3,3,3,3],
                    [1,1,2,3,3,3,4,4,3,3],
                    [1,1,2,2,3,3,4,4,4,3],
                    [1,1,2,2,3,3,4,4,4,10],
                    [5,5,6,6,6,3,4,10,10,10],
                    [5,5,7,7,7,7,8,10,10,10],
                    [5,5,7,5,5,7,8,8,10,10],
                    [5,5,5,5,5,7,8,8,10,10],
                    [5,5,5,5,7,7,7,8,9,10],
                    [5,5,5,7,7,7,9,9,9,10]],

           answer:  [[0,0,0,1,0,1,0,0,0,0],
                     [0,1,0,0,0,0,0,1,0,0],
                     [0,0,0,1,0,1,0,0,0,0],
                     [1,0,0,0,0,0,0,0,1,0],
                     [0,0,1,0,1,0,0,0,0,0],
                     [0,0,0,0,0,0,1,0,0,1],
                     [1,0,1,0,0,0,0,0,0,0],
                     [0,0,0,0,0,0,0,1,0,1],
                     [0,1,0,0,1,0,0,0,0,0],
                     [0,0,0,0,0,0,1,0,1,0]]}
        - {id: 2,
           level: 2,
           gridSize: 10,
           numStars: 2,
           layout: [  [5,5,5,5,5,5,1,1,1,1],
                      [5,4,4,5,1,1,1,2,2,2],
                      [5,4,4,5,5,1,1,2,2,2],
                      [5,3,4,4,1,1,1,2,2,2],
                      [5,3,4,6,6,6,6,9,2,2],
                      [5,3,4,6,6,6,6,9,9,9],
                      [5,5,6,6,6,8,8,8,8,9],
                      [5,5,6,10,6,8,8,8,8,9],
                      [7,7,7,10,6,8,8,8,8,9],
                      [7,7,7,10,10,8,8,8,8,9]],

           answer:  [ [0,1,0,0,0,0,0,0,1,0],
                      [0,0,0,1,0,0,1,0,0,0],
                      [0,1,0,0,0,0,0,0,1,0],
                      [0,0,0,1,0,1,0,0,0,0],
                      [0,0,0,0,0,0,0,1,0,1],
                      [0,0,1,0,0,1,0,0,0,0],
                      [0,0,0,0,0,0,0,1,0,1],
                      [1,0,0,0,1,0,0,0,0,0],
                      [0,0,1,0,0,0,1,0,0,0],
                      [1,0,0,0,1,0,0,0,0,0]]}



    User:
      properties:
        id:
          type: integer
          format: int64
        levelsSolved:
          type: integer
          format: int64
        puzzlesSolved:
          type: integer
          format: int64
        Title:
          type: string

      example:
        { id: 18380102,
          levelsSolved: 0,
          puzzlesSolved: 0,
          String title: "Noob"
        }

    Users:
      type: array
      items:
        type: integer

      example:
        - { id: 18380102,
            levelsSolved: 0,
            puzzlesSolved: 0,
            String title: "New Player"
        }
        - { id: 18980103,
            levelsSolved: 10,
            puzzlesSolved: 10,
            String title: "Noob"
        }

    Level:
      properties:
        levelsSolved:
          type: integer
          format: int64

      example:
        {
          levelsSolved: 0
        }

    Solved:
      properties:
        levelsSolved:
          type: integer
          format: int64

      example:
        {
          puzzlesSolved: 0
        }

    Title:
      properties:
        title:
          type: string

      example:
        {
          title: "Noob"
        }
